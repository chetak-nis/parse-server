"use strict";

const cryptoUtils = require('./cryptoUtils');

const RestQuery = require('./RestQuery');

const Parse = require('parse/node'); // An Auth object tells you who is requesting something and whether
// the master key was used.
// userObject is a Parse.User and can be null if there's no user.


function Auth({
  config,
  cacheController = undefined,
  isMaster = false,
  isReadOnly = false,
  user,
  installationId
}) {
  this.config = config;
  this.cacheController = cacheController || config && config.cacheController;
  this.installationId = installationId;
  this.isMaster = isMaster;
  this.user = user;
  this.isReadOnly = isReadOnly; // Assuming a users roles won't change during a single request, we'll
  // only load them once.

  this.userRoles = [];
  this.fetchedRoles = false;
  this.rolePromise = null;
} // Whether this auth could possibly modify the given user id.
// It still could be forbidden via ACLs even if this returns true.


Auth.prototype.isUnauthenticated = function () {
  if (this.isMaster) {
    return false;
  }

  if (this.user) {
    return false;
  }

  return true;
}; // A helper to get a master-level Auth object


function master(config) {
  return new Auth({
    config,
    isMaster: true
  });
} // A helper to get a master-level Auth object


function readOnly(config) {
  return new Auth({
    config,
    isMaster: true,
    isReadOnly: true
  });
} // A helper to get a nobody-level Auth object


function nobody(config) {
  return new Auth({
    config,
    isMaster: false
  });
} // Returns a promise that resolves to an Auth object


const getAuthForSessionToken = async function ({
  config,
  cacheController,
  sessionToken,
  installationId
}) {
  cacheController = cacheController || config && config.cacheController;

  if (cacheController) {
    const userJSON = await cacheController.user.get(sessionToken);

    if (userJSON) {
      const cachedUser = Parse.Object.fromJSON(userJSON);
      return Promise.resolve(new Auth({
        config,
        cacheController,
        isMaster: false,
        installationId,
        user: cachedUser
      }));
    }
  }

  let results;

  if (config) {
    const restOptions = {
      limit: 1,
      include: 'user'
    };
    const query = new RestQuery(config, master(config), 'AdminSession', {
      sessionToken
    }, restOptions);
    results = (await query.execute()).results;
  } else {
    results = (await new Parse.Query(Parse.Session).limit(1).include('user').equalTo('sessionToken', sessionToken).find({
      useMasterKey: true
    })).map(obj => obj.toJSON());
  }

  if (results.length !== 1 || !results[0]['user']) {
    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  }

  const now = new Date(),
        expiresAt = results[0].expiresAt ? new Date(results[0].expiresAt.iso) : undefined;

  if (expiresAt < now) {
    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Session token is expired.');
  }

  const obj = results[0]['user'];
  delete obj.password;
  obj['className'] = 'AdminUser';
  obj['sessionToken'] = sessionToken;

  if (cacheController) {
    cacheController.user.put(sessionToken, obj);
  }

  const userObject = Parse.Object.fromJSON(obj);
  return new Auth({
    config,
    cacheController,
    isMaster: false,
    installationId,
    user: userObject
  });
};

var getAuthForLegacySessionToken = function ({
  config,
  sessionToken,
  installationId
}) {
  var restOptions = {
    limit: 1
  };
  var query = new RestQuery(config, master(config), 'AdminUser', {
    sessionToken
  }, restOptions);
  return query.execute().then(response => {
    var results = response.results;

    if (results.length !== 1) {
      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'invalid legacy session token');
    }

    const obj = results[0];
    obj.className = 'AdminUser';
    const userObject = Parse.Object.fromJSON(obj);
    return new Auth({
      config,
      isMaster: false,
      installationId,
      user: userObject
    });
  });
}; // Returns a promise that resolves to an array of role names


Auth.prototype.getUserRoles = function () {
  if (this.isMaster || !this.user) {
    return Promise.resolve([]);
  }

  if (this.fetchedRoles) {
    return Promise.resolve(this.userRoles);
  }

  if (this.rolePromise) {
    return this.rolePromise;
  }

  this.rolePromise = this._loadRoles();
  return this.rolePromise;
};

Auth.prototype.getRolesForUser = async function () {
  //Stack all Parse.Role
  const results = [];

  if (this.config) {
    const restWhere = {
      users: {
        __type: 'Pointer',
        className: 'AdminUser',
        objectId: this.user.id
      }
    };
    await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result => results.push(result));
  } else {
    await new Parse.Query(Parse.Role).equalTo('users', this.user).each(result => results.push(result.toJSON()), {
      useMasterKey: true
    });
  }

  return results;
}; // Iterates through the role tree and compiles a user's roles


Auth.prototype._loadRoles = async function () {
  if (this.cacheController) {
    const cachedRoles = await this.cacheController.role.get(this.user.id);

    if (cachedRoles != null) {
      this.fetchedRoles = true;
      this.userRoles = cachedRoles;
      return cachedRoles;
    }
  } // First get the role ids this user is directly a member of


  const results = await this.getRolesForUser();

  if (!results.length) {
    this.userRoles = [];
    this.fetchedRoles = true;
    this.rolePromise = null;
    this.cacheRoles();
    return this.userRoles;
  }

  const rolesMap = results.reduce((m, r) => {
    m.names.push(r.name);
    m.ids.push(r.objectId);
    return m;
  }, {
    ids: [],
    names: []
  }); // run the recursive finding

  const roleNames = await this._getAllRolesNamesForRoleIds(rolesMap.ids, rolesMap.names);
  this.userRoles = roleNames.map(r => {
    return 'role:' + r;
  });
  this.fetchedRoles = true;
  this.rolePromise = null;
  this.cacheRoles();
  return this.userRoles;
};

Auth.prototype.cacheRoles = function () {
  if (!this.cacheController) {
    return false;
  }

  this.cacheController.role.put(this.user.id, Array(...this.userRoles));
  return true;
};

Auth.prototype.getRolesByIds = async function (ins) {
  const results = []; // Build an OR query across all parentRoles

  if (!this.config) {
    await new Parse.Query(Parse.Role).containedIn('roles', ins.map(id => {
      const role = new Parse.Object(Parse.Role);
      role.id = id;
      return role;
    })).each(result => results.push(result.toJSON()), {
      useMasterKey: true
    });
  } else {
    const roles = ins.map(id => {
      return {
        __type: 'Pointer',
        className: '_Role',
        objectId: id
      };
    });
    const restWhere = {
      roles: {
        $in: roles
      }
    };
    await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result => results.push(result));
  }

  return results;
}; // Given a list of roleIds, find all the parent roles, returns a promise with all names


Auth.prototype._getAllRolesNamesForRoleIds = function (roleIDs, names = [], queriedRoles = {}) {
  const ins = roleIDs.filter(roleID => {
    const wasQueried = queriedRoles[roleID] !== true;
    queriedRoles[roleID] = true;
    return wasQueried;
  }); // all roles are accounted for, return the names

  if (ins.length == 0) {
    return Promise.resolve([...new Set(names)]);
  }

  return this.getRolesByIds(ins).then(results => {
    // Nothing found
    if (!results.length) {
      return Promise.resolve(names);
    } // Map the results with all Ids and names


    const resultMap = results.reduce((memo, role) => {
      memo.names.push(role.name);
      memo.ids.push(role.objectId);
      return memo;
    }, {
      ids: [],
      names: []
    }); // store the new found names

    names = names.concat(resultMap.names); // find the next ones, circular roles will be cut

    return this._getAllRolesNamesForRoleIds(resultMap.ids, names, queriedRoles);
  }).then(names => {
    return Promise.resolve([...new Set(names)]);
  });
};

const createSession = function (config, {
  userId,
  createdWith,
  installationId,
  additionalSessionData
}) {
  const token = 'r:' + cryptoUtils.newToken();
  const expiresAt = config.generateSessionExpiresAt();
  const sessionData = {
    sessionToken: token,
    user: {
      __type: 'Pointer',
      className: 'AdminUser',
      objectId: userId
    },
    createdWith,
    restricted: false,
    expiresAt: Parse._encode(expiresAt)
  };

  if (installationId) {
    sessionData.installationId = installationId;
  }

  Object.assign(sessionData, additionalSessionData); // We need to import RestWrite at this point for the cyclic dependency it has to it

  const RestWrite = require('./RestWrite');

  return {
    sessionData,
    createSession: () => new RestWrite(config, master(config), 'AdminSession', null, sessionData).execute()
  };
};

module.exports = {
  Auth,
  master,
  nobody,
  readOnly,
  getAuthForSessionToken,
  getAuthForLegacySessionToken,
  createSession
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BdXRoLmpzIl0sIm5hbWVzIjpbImNyeXB0b1V0aWxzIiwicmVxdWlyZSIsIlJlc3RRdWVyeSIsIlBhcnNlIiwiY2FjaGVDb250cm9sbGVyIiwiaXNNYXN0ZXIiLCJpc1JlYWRPbmx5IiwiaW5zdGFsbGF0aW9uSWQiLCJjb25maWciLCJBdXRoIiwiZ2V0QXV0aEZvclNlc3Npb25Ub2tlbiIsInVzZXJKU09OIiwiY2FjaGVkVXNlciIsInVzZXIiLCJyZXN0T3B0aW9ucyIsImxpbWl0IiwiaW5jbHVkZSIsInF1ZXJ5IiwibWFzdGVyIiwic2Vzc2lvblRva2VuIiwicmVzdWx0cyIsInVzZU1hc3RlcktleSIsIm9iaiIsIm5vdyIsImV4cGlyZXNBdCIsInVzZXJPYmplY3QiLCJnZXRBdXRoRm9yTGVnYWN5U2Vzc2lvblRva2VuIiwicmVzcG9uc2UiLCJQcm9taXNlIiwicmVzdFdoZXJlIiwidXNlcnMiLCJfX3R5cGUiLCJjbGFzc05hbWUiLCJvYmplY3RJZCIsImlkIiwicmVzdWx0IiwiY2FjaGVkUm9sZXMiLCJyb2xlc01hcCIsIm0iLCJyIiwiaWRzIiwibmFtZXMiLCJyb2xlTmFtZXMiLCJBcnJheSIsInJvbGUiLCJyb2xlcyIsIiRpbiIsInF1ZXJpZWRSb2xlcyIsImlucyIsInJvbGVJRCIsIndhc1F1ZXJpZWQiLCJyZXN1bHRNYXAiLCJtZW1vIiwiY3JlYXRlU2Vzc2lvbiIsImFkZGl0aW9uYWxTZXNzaW9uRGF0YSIsInRva2VuIiwic2Vzc2lvbkRhdGEiLCJ1c2VySWQiLCJyZXN0cmljdGVkIiwiT2JqZWN0IiwiUmVzdFdyaXRlIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLFdBQVcsR0FBR0MsT0FBTyxDQUEzQixlQUEyQixDQUEzQjs7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBekIsYUFBeUIsQ0FBekI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQXJCLFlBQXFCLENBQXJCLEMsQ0FFQTtBQUNBO0FB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QUFBO0FBQ0Q7O0FBRURHLEVBQUFBLE1BQU0sQ0FBTkEsTUFBQUEsQ0FBQUEsV0FBQUEsRUFuQkEscUJBbUJBQSxFQW5CQSxDQW9CQTs7QUFDQSxRQUFNQyxTQUFTLEdBQUczRCxPQUFPLENBQXpCLGFBQXlCLENBQXpCOztBQUVBLFNBQU87QUFBQSxJQUFBLFdBQUE7QUFFTG9ELElBQUFBLGFBQWEsRUFBRSxNQUNiLElBQUEsU0FBQSxDQUFBLE1BQUEsRUFFRW5DLE1BQU0sQ0FGUixNQUVRLENBRlIsRUFBQSxjQUFBLEVBQUEsSUFBQSxFQUFBLFdBQUEsRUFBQSxPQUFBO0FBSEcsR0FBUDtBQTFCRixDQUFBOztBQXVDQTJDLE1BQU0sQ0FBTkEsT0FBQUEsR0FBaUI7QUFBQSxFQUFBLElBQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBLFFBQUE7QUFBQSxFQUFBLHNCQUFBO0FBQUEsRUFBQSw0QkFBQTtBQU9mUixFQUFBQTtBQVBlLENBQWpCUSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG9VdGlscycpO1xuY29uc3QgUmVzdFF1ZXJ5ID0gcmVxdWlyZSgnLi9SZXN0UXVlcnknKTtcbmNvbnN0IFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpO1xuXG4vLyBBbiBBdXRoIG9iamVjdCB0ZWxscyB5b3Ugd2hvIGlzIHJlcXVlc3Rpbmcgc29tZXRoaW5nIGFuZCB3aGV0aGVyXG4vLyB0aGUgbWFzdGVyIGtleSB3YXMgdXNlZC5cbi8vIHVzZXJPYmplY3QgaXMgYSBQYXJzZS5Vc2VyIGFuZCBjYW4gYmUgbnVsbCBpZiB0aGVyZSdzIG5vIHVzZXIuXG5mdW5jdGlvbiBBdXRoKHtcbiAgY29uZmlnLFxuICBjYWNoZUNvbnRyb2xsZXIgPSB1bmRlZmluZWQsXG4gIGlzTWFzdGVyID0gZmFsc2UsXG4gIGlzUmVhZE9ubHkgPSBmYWxzZSxcbiAgdXNlcixcbiAgaW5zdGFsbGF0aW9uSWQsXG59KSB7XG4gIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB0aGlzLmNhY2hlQ29udHJvbGxlciA9IGNhY2hlQ29udHJvbGxlciB8fCAoY29uZmlnICYmIGNvbmZpZy5jYWNoZUNvbnRyb2xsZXIpO1xuICB0aGlzLmluc3RhbGxhdGlvbklkID0gaW5zdGFsbGF0aW9uSWQ7XG4gIHRoaXMuaXNNYXN0ZXIgPSBpc01hc3RlcjtcbiAgdGhpcy51c2VyID0gdXNlcjtcbiAgdGhpcy5pc1JlYWRPbmx5ID0gaXNSZWFkT25seTtcblxuICAvLyBBc3N1bWluZyBhIHVzZXJzIHJvbGVzIHdvbid0IGNoYW5nZSBkdXJpbmcgYSBzaW5nbGUgcmVxdWVzdCwgd2UnbGxcbiAgLy8gb25seSBsb2FkIHRoZW0gb25jZS5cbiAgdGhpcy51c2VyUm9sZXMgPSBbXTtcbiAgdGhpcy5mZXRjaGVkUm9sZXMgPSBmYWxzZTtcbiAgdGhpcy5yb2xlUHJvbWlzZSA9IG51bGw7XG59XG5cbi8vIFdoZXRoZXIgdGhpcyBhdXRoIGNvdWxkIHBvc3NpYmx5IG1vZGlmeSB0aGUgZ2l2ZW4gdXNlciBpZC5cbi8vIEl0IHN0aWxsIGNvdWxkIGJlIGZvcmJpZGRlbiB2aWEgQUNMcyBldmVuIGlmIHRoaXMgcmV0dXJucyB0cnVlLlxuQXV0aC5wcm90b3R5cGUuaXNVbmF1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXNNYXN0ZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMudXNlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIEEgaGVscGVyIHRvIGdldCBhIG1hc3Rlci1sZXZlbCBBdXRoIG9iamVjdFxuZnVuY3Rpb24gbWFzdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IEF1dGgoeyBjb25maWcsIGlzTWFzdGVyOiB0cnVlIH0pO1xufVxuXG4vLyBBIGhlbHBlciB0byBnZXQgYSBtYXN0ZXItbGV2ZWwgQXV0aCBvYmplY3RcbmZ1bmN0aW9uIHJlYWRPbmx5KGNvbmZpZykge1xuICByZXR1cm4gbmV3IEF1dGgoeyBjb25maWcsIGlzTWFzdGVyOiB0cnVlLCBpc1JlYWRPbmx5OiB0cnVlIH0pO1xufVxuXG4vLyBBIGhlbHBlciB0byBnZXQgYSBub2JvZHktbGV2ZWwgQXV0aCBvYmplY3RcbmZ1bmN0aW9uIG5vYm9keShjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBBdXRoKHsgY29uZmlnLCBpc01hc3RlcjogZmFsc2UgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gQXV0aCBvYmplY3RcbmNvbnN0IGdldEF1dGhGb3JTZXNzaW9uVG9rZW4gPSBhc3luYyBmdW5jdGlvbih7XG4gIGNvbmZpZyxcbiAgY2FjaGVDb250cm9sbGVyLFxuICBzZXNzaW9uVG9rZW4sXG4gIGluc3RhbGxhdGlvbklkLFxufSkge1xuICBjYWNoZUNvbnRyb2xsZXIgPSBjYWNoZUNvbnRyb2xsZXIgfHwgKGNvbmZpZyAmJiBjb25maWcuY2FjaGVDb250cm9sbGVyKTtcbiAgaWYgKGNhY2hlQ29udHJvbGxlcikge1xuICAgIGNvbnN0IHVzZXJKU09OID0gYXdhaXQgY2FjaGVDb250cm9sbGVyLnVzZXIuZ2V0KHNlc3Npb25Ub2tlbik7XG4gICAgaWYgKHVzZXJKU09OKSB7XG4gICAgICBjb25zdCBjYWNoZWRVc2VyID0gUGFyc2UuT2JqZWN0LmZyb21KU09OKHVzZXJKU09OKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgIG5ldyBBdXRoKHtcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY2FjaGVDb250cm9sbGVyLFxuICAgICAgICAgIGlzTWFzdGVyOiBmYWxzZSxcbiAgICAgICAgICBpbnN0YWxsYXRpb25JZCxcbiAgICAgICAgICB1c2VyOiBjYWNoZWRVc2VyLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVzdWx0cztcbiAgaWYgKGNvbmZpZykge1xuICAgIGNvbnN0IHJlc3RPcHRpb25zID0ge1xuICAgICAgbGltaXQ6IDEsXG4gICAgICBpbmNsdWRlOiAndXNlcicsXG4gICAgfTtcblxuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFJlc3RRdWVyeShcbiAgICAgIGNvbmZpZyxcbiAgICAgIG1hc3Rlcihjb25maWcpLFxuICAgICAgJ19TZXNzaW9uJyxcbiAgICAgIHsgc2Vzc2lvblRva2VuIH0sXG4gICAgICByZXN0T3B0aW9uc1xuICAgICk7XG4gICAgcmVzdWx0cyA9IChhd2FpdCBxdWVyeS5leGVjdXRlKCkpLnJlc3VsdHM7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0cyA9IChhd2FpdCBuZXcgUGFyc2UuUXVlcnkoUGFyc2UuU2Vzc2lvbilcbiAgICAgIC5saW1pdCgxKVxuICAgICAgLmluY2x1ZGUoJ3VzZXInKVxuICAgICAgLmVxdWFsVG8oJ3Nlc3Npb25Ub2tlbicsIHNlc3Npb25Ub2tlbilcbiAgICAgIC5maW5kKHsgdXNlTWFzdGVyS2V5OiB0cnVlIH0pKS5tYXAob2JqID0+IG9iai50b0pTT04oKSk7XG4gIH1cblxuICBpZiAocmVzdWx0cy5sZW5ndGggIT09IDEgfHwgIXJlc3VsdHNbMF1bJ3VzZXInXSkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTixcbiAgICAgICdJbnZhbGlkIHNlc3Npb24gdG9rZW4nXG4gICAgKTtcbiAgfVxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLFxuICAgIGV4cGlyZXNBdCA9IHJlc3VsdHNbMF0uZXhwaXJlc0F0XG4gICAgICA/IG5ldyBEYXRlKHJlc3VsdHNbMF0uZXhwaXJlc0F0LmlzbylcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoZXhwaXJlc0F0IDwgbm93KSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLFxuICAgICAgJ1Nlc3Npb24gdG9rZW4gaXMgZXhwaXJlZC4nXG4gICAgKTtcbiAgfVxuICBjb25zdCBvYmogPSByZXN1bHRzWzBdWyd1c2VyJ107XG4gIGRlbGV0ZSBvYmoucGFzc3dvcmQ7XG4gIG9ialsnY2xhc3NOYW1lJ10gPSAnX1VzZXInO1xuICBvYmpbJ3Nlc3Npb25Ub2tlbiddID0gc2Vzc2lvblRva2VuO1xuICBpZiAoY2FjaGVDb250cm9sbGVyKSB7XG4gICAgY2FjaGVDb250cm9sbGVyLnVzZXIucHV0KHNlc3Npb25Ub2tlbiwgb2JqKTtcbiAgfVxuICBjb25zdCB1c2VyT2JqZWN0ID0gUGFyc2UuT2JqZWN0LmZyb21KU09OKG9iaik7XG4gIHJldHVybiBuZXcgQXV0aCh7XG4gICAgY29uZmlnLFxuICAgIGNhY2hlQ29udHJvbGxlcixcbiAgICBpc01hc3RlcjogZmFsc2UsXG4gICAgaW5zdGFsbGF0aW9uSWQsXG4gICAgdXNlcjogdXNlck9iamVjdCxcbiAgfSk7XG59O1xuXG52YXIgZ2V0QXV0aEZvckxlZ2FjeVNlc3Npb25Ub2tlbiA9IGZ1bmN0aW9uKHtcbiAgY29uZmlnLFxuICBzZXNzaW9uVG9rZW4sXG4gIGluc3RhbGxhdGlvbklkLFxufSkge1xuICB2YXIgcmVzdE9wdGlvbnMgPSB7XG4gICAgbGltaXQ6IDEsXG4gIH07XG4gIHZhciBxdWVyeSA9IG5ldyBSZXN0UXVlcnkoXG4gICAgY29uZmlnLFxuICAgIG1hc3Rlcihjb25maWcpLFxuICAgICdfVXNlcicsXG4gICAgeyBzZXNzaW9uVG9rZW4gfSxcbiAgICByZXN0T3B0aW9uc1xuICApO1xuICByZXR1cm4gcXVlcnkuZXhlY3V0ZSgpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIHZhciByZXN1bHRzID0gcmVzcG9uc2UucmVzdWx0cztcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLFxuICAgICAgICAnaW52YWxpZCBsZWdhY3kgc2Vzc2lvbiB0b2tlbidcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IHJlc3VsdHNbMF07XG4gICAgb2JqLmNsYXNzTmFtZSA9ICdfVXNlcic7XG4gICAgY29uc3QgdXNlck9iamVjdCA9IFBhcnNlLk9iamVjdC5mcm9tSlNPTihvYmopO1xuICAgIHJldHVybiBuZXcgQXV0aCh7XG4gICAgICBjb25maWcsXG4gICAgICBpc01hc3RlcjogZmFsc2UsXG4gICAgICBpbnN0YWxsYXRpb25JZCxcbiAgICAgIHVzZXI6IHVzZXJPYmplY3QsXG4gICAgfSk7XG4gIH0pO1xufTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiByb2xlIG5hbWVzXG5BdXRoLnByb3RvdHlwZS5nZXRVc2VyUm9sZXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXNNYXN0ZXIgfHwgIXRoaXMudXNlcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICB9XG4gIGlmICh0aGlzLmZldGNoZWRSb2xlcykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy51c2VyUm9sZXMpO1xuICB9XG4gIGlmICh0aGlzLnJvbGVQcm9taXNlKSB7XG4gICAgcmV0dXJuIHRoaXMucm9sZVByb21pc2U7XG4gIH1cbiAgdGhpcy5yb2xlUHJvbWlzZSA9IHRoaXMuX2xvYWRSb2xlcygpO1xuICByZXR1cm4gdGhpcy5yb2xlUHJvbWlzZTtcbn07XG5cbkF1dGgucHJvdG90eXBlLmdldFJvbGVzRm9yVXNlciA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAvL1N0YWNrIGFsbCBQYXJzZS5Sb2xlXG4gIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgY29uc3QgcmVzdFdoZXJlID0ge1xuICAgICAgdXNlcnM6IHtcbiAgICAgICAgX190eXBlOiAnUG9pbnRlcicsXG4gICAgICAgIGNsYXNzTmFtZTogJ19Vc2VyJyxcbiAgICAgICAgb2JqZWN0SWQ6IHRoaXMudXNlci5pZCxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhd2FpdCBuZXcgUmVzdFF1ZXJ5KFxuICAgICAgdGhpcy5jb25maWcsXG4gICAgICBtYXN0ZXIodGhpcy5jb25maWcpLFxuICAgICAgJ19Sb2xlJyxcbiAgICAgIHJlc3RXaGVyZSxcbiAgICAgIHt9XG4gICAgKS5lYWNoKHJlc3VsdCA9PiByZXN1bHRzLnB1c2gocmVzdWx0KSk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgbmV3IFBhcnNlLlF1ZXJ5KFBhcnNlLlJvbGUpXG4gICAgICAuZXF1YWxUbygndXNlcnMnLCB0aGlzLnVzZXIpXG4gICAgICAuZWFjaChyZXN1bHQgPT4gcmVzdWx0cy5wdXNoKHJlc3VsdC50b0pTT04oKSksIHsgdXNlTWFzdGVyS2V5OiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gSXRlcmF0ZXMgdGhyb3VnaCB0aGUgcm9sZSB0cmVlIGFuZCBjb21waWxlcyBhIHVzZXIncyByb2xlc1xuQXV0aC5wcm90b3R5cGUuX2xvYWRSb2xlcyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5jYWNoZUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBjYWNoZWRSb2xlcyA9IGF3YWl0IHRoaXMuY2FjaGVDb250cm9sbGVyLnJvbGUuZ2V0KHRoaXMudXNlci5pZCk7XG4gICAgaWYgKGNhY2hlZFJvbGVzICE9IG51bGwpIHtcbiAgICAgIHRoaXMuZmV0Y2hlZFJvbGVzID0gdHJ1ZTtcbiAgICAgIHRoaXMudXNlclJvbGVzID0gY2FjaGVkUm9sZXM7XG4gICAgICByZXR1cm4gY2FjaGVkUm9sZXM7XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QgZ2V0IHRoZSByb2xlIGlkcyB0aGlzIHVzZXIgaXMgZGlyZWN0bHkgYSBtZW1iZXIgb2ZcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMuZ2V0Um9sZXNGb3JVc2VyKCk7XG4gIGlmICghcmVzdWx0cy5sZW5ndGgpIHtcbiAgICB0aGlzLnVzZXJSb2xlcyA9IFtdO1xuICAgIHRoaXMuZmV0Y2hlZFJvbGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJvbGVQcm9taXNlID0gbnVsbDtcblxuICAgIHRoaXMuY2FjaGVSb2xlcygpO1xuICAgIHJldHVybiB0aGlzLnVzZXJSb2xlcztcbiAgfVxuXG4gIGNvbnN0IHJvbGVzTWFwID0gcmVzdWx0cy5yZWR1Y2UoXG4gICAgKG0sIHIpID0+IHtcbiAgICAgIG0ubmFtZXMucHVzaChyLm5hbWUpO1xuICAgICAgbS5pZHMucHVzaChyLm9iamVjdElkKTtcbiAgICAgIHJldHVybiBtO1xuICAgIH0sXG4gICAgeyBpZHM6IFtdLCBuYW1lczogW10gfVxuICApO1xuXG4gIC8vIHJ1biB0aGUgcmVjdXJzaXZlIGZpbmRpbmdcbiAgY29uc3Qgcm9sZU5hbWVzID0gYXdhaXQgdGhpcy5fZ2V0QWxsUm9sZXNOYW1lc0ZvclJvbGVJZHMoXG4gICAgcm9sZXNNYXAuaWRzLFxuICAgIHJvbGVzTWFwLm5hbWVzXG4gICk7XG4gIHRoaXMudXNlclJvbGVzID0gcm9sZU5hbWVzLm1hcChyID0+IHtcbiAgICByZXR1cm4gJ3JvbGU6JyArIHI7XG4gIH0pO1xuICB0aGlzLmZldGNoZWRSb2xlcyA9IHRydWU7XG4gIHRoaXMucm9sZVByb21pc2UgPSBudWxsO1xuICB0aGlzLmNhY2hlUm9sZXMoKTtcbiAgcmV0dXJuIHRoaXMudXNlclJvbGVzO1xufTtcblxuQXV0aC5wcm90b3R5cGUuY2FjaGVSb2xlcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuY2FjaGVDb250cm9sbGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRoaXMuY2FjaGVDb250cm9sbGVyLnJvbGUucHV0KHRoaXMudXNlci5pZCwgQXJyYXkoLi4udGhpcy51c2VyUm9sZXMpKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5BdXRoLnByb3RvdHlwZS5nZXRSb2xlc0J5SWRzID0gYXN5bmMgZnVuY3Rpb24oaW5zKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgLy8gQnVpbGQgYW4gT1IgcXVlcnkgYWNyb3NzIGFsbCBwYXJlbnRSb2xlc1xuICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgYXdhaXQgbmV3IFBhcnNlLlF1ZXJ5KFBhcnNlLlJvbGUpXG4gICAgICAuY29udGFpbmVkSW4oXG4gICAgICAgICdyb2xlcycsXG4gICAgICAgIGlucy5tYXAoaWQgPT4ge1xuICAgICAgICAgIGNvbnN0IHJvbGUgPSBuZXcgUGFyc2UuT2JqZWN0KFBhcnNlLlJvbGUpO1xuICAgICAgICAgIHJvbGUuaWQgPSBpZDtcbiAgICAgICAgICByZXR1cm4gcm9sZTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC5lYWNoKHJlc3VsdCA9PiByZXN1bHRzLnB1c2gocmVzdWx0LnRvSlNPTigpKSwgeyB1c2VNYXN0ZXJLZXk6IHRydWUgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgcm9sZXMgPSBpbnMubWFwKGlkID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fdHlwZTogJ1BvaW50ZXInLFxuICAgICAgICBjbGFzc05hbWU6ICdfUm9sZScsXG4gICAgICAgIG9iamVjdElkOiBpZCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdFdoZXJlID0geyByb2xlczogeyAkaW46IHJvbGVzIH0gfTtcbiAgICBhd2FpdCBuZXcgUmVzdFF1ZXJ5KFxuICAgICAgdGhpcy5jb25maWcsXG4gICAgICBtYXN0ZXIodGhpcy5jb25maWcpLFxuICAgICAgJ19Sb2xlJyxcbiAgICAgIHJlc3RXaGVyZSxcbiAgICAgIHt9XG4gICAgKS5lYWNoKHJlc3VsdCA9PiByZXN1bHRzLnB1c2gocmVzdWx0KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBHaXZlbiBhIGxpc3Qgb2Ygcm9sZUlkcywgZmluZCBhbGwgdGhlIHBhcmVudCByb2xlcywgcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbGwgbmFtZXNcbkF1dGgucHJvdG90eXBlLl9nZXRBbGxSb2xlc05hbWVzRm9yUm9sZUlkcyA9IGZ1bmN0aW9uKFxuICByb2xlSURzLFxuICBuYW1lcyA9IFtdLFxuICBxdWVyaWVkUm9sZXMgPSB7fVxuKSB7XG4gIGNvbnN0IGlucyA9IHJvbGVJRHMuZmlsdGVyKHJvbGVJRCA9PiB7XG4gICAgY29uc3Qgd2FzUXVlcmllZCA9IHF1ZXJpZWRSb2xlc1tyb2xlSURdICE9PSB0cnVlO1xuICAgIHF1ZXJpZWRSb2xlc1tyb2xlSURdID0gdHJ1ZTtcbiAgICByZXR1cm4gd2FzUXVlcmllZDtcbiAgfSk7XG5cbiAgLy8gYWxsIHJvbGVzIGFyZSBhY2NvdW50ZWQgZm9yLCByZXR1cm4gdGhlIG5hbWVzXG4gIGlmIChpbnMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFsuLi5uZXcgU2V0KG5hbWVzKV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZ2V0Um9sZXNCeUlkcyhpbnMpXG4gICAgLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAvLyBOb3RoaW5nIGZvdW5kXG4gICAgICBpZiAoIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmFtZXMpO1xuICAgICAgfVxuICAgICAgLy8gTWFwIHRoZSByZXN1bHRzIHdpdGggYWxsIElkcyBhbmQgbmFtZXNcbiAgICAgIGNvbnN0IHJlc3VsdE1hcCA9IHJlc3VsdHMucmVkdWNlKFxuICAgICAgICAobWVtbywgcm9sZSkgPT4ge1xuICAgICAgICAgIG1lbW8ubmFtZXMucHVzaChyb2xlLm5hbWUpO1xuICAgICAgICAgIG1lbW8uaWRzLnB1c2gocm9sZS5vYmplY3RJZCk7XG4gICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sXG4gICAgICAgIHsgaWRzOiBbXSwgbmFtZXM6IFtdIH1cbiAgICAgICk7XG4gICAgICAvLyBzdG9yZSB0aGUgbmV3IGZvdW5kIG5hbWVzXG4gICAgICBuYW1lcyA9IG5hbWVzLmNvbmNhdChyZXN1bHRNYXAubmFtZXMpO1xuICAgICAgLy8gZmluZCB0aGUgbmV4dCBvbmVzLCBjaXJjdWxhciByb2xlcyB3aWxsIGJlIGN1dFxuICAgICAgcmV0dXJuIHRoaXMuX2dldEFsbFJvbGVzTmFtZXNGb3JSb2xlSWRzKFxuICAgICAgICByZXN1bHRNYXAuaWRzLFxuICAgICAgICBuYW1lcyxcbiAgICAgICAgcXVlcmllZFJvbGVzXG4gICAgICApO1xuICAgIH0pXG4gICAgLnRoZW4obmFtZXMgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbLi4ubmV3IFNldChuYW1lcyldKTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IGNyZWF0ZVNlc3Npb24gPSBmdW5jdGlvbihcbiAgY29uZmlnLFxuICB7IHVzZXJJZCwgY3JlYXRlZFdpdGgsIGluc3RhbGxhdGlvbklkLCBhZGRpdGlvbmFsU2Vzc2lvbkRhdGEgfVxuKSB7XG4gIGNvbnN0IHRva2VuID0gJ3I6JyArIGNyeXB0b1V0aWxzLm5ld1Rva2VuKCk7XG4gIGNvbnN0IGV4cGlyZXNBdCA9IGNvbmZpZy5nZW5lcmF0ZVNlc3Npb25FeHBpcmVzQXQoKTtcbiAgY29uc3Qgc2Vzc2lvbkRhdGEgPSB7XG4gICAgc2Vzc2lvblRva2VuOiB0b2tlbixcbiAgICB1c2VyOiB7XG4gICAgICBfX3R5cGU6ICdQb2ludGVyJyxcbiAgICAgIGNsYXNzTmFtZTogJ19Vc2VyJyxcbiAgICAgIG9iamVjdElkOiB1c2VySWQsXG4gICAgfSxcbiAgICBjcmVhdGVkV2l0aCxcbiAgICByZXN0cmljdGVkOiBmYWxzZSxcbiAgICBleHBpcmVzQXQ6IFBhcnNlLl9lbmNvZGUoZXhwaXJlc0F0KSxcbiAgfTtcblxuICBpZiAoaW5zdGFsbGF0aW9uSWQpIHtcbiAgICBzZXNzaW9uRGF0YS5pbnN0YWxsYXRpb25JZCA9IGluc3RhbGxhdGlvbklkO1xuICB9XG5cbiAgT2JqZWN0LmFzc2lnbihzZXNzaW9uRGF0YSwgYWRkaXRpb25hbFNlc3Npb25EYXRhKTtcbiAgLy8gV2UgbmVlZCB0byBpbXBvcnQgUmVzdFdyaXRlIGF0IHRoaXMgcG9pbnQgZm9yIHRoZSBjeWNsaWMgZGVwZW5kZW5jeSBpdCBoYXMgdG8gaXRcbiAgY29uc3QgUmVzdFdyaXRlID0gcmVxdWlyZSgnLi9SZXN0V3JpdGUnKTtcblxuICByZXR1cm4ge1xuICAgIHNlc3Npb25EYXRhLFxuICAgIGNyZWF0ZVNlc3Npb246ICgpID0+XG4gICAgICBuZXcgUmVzdFdyaXRlKFxuICAgICAgICBjb25maWcsXG4gICAgICAgIG1hc3Rlcihjb25maWcpLFxuICAgICAgICAnX1Nlc3Npb24nLFxuICAgICAgICBudWxsLFxuICAgICAgICBzZXNzaW9uRGF0YVxuICAgICAgKS5leGVjdXRlKCksXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXV0aCxcbiAgbWFzdGVyLFxuICBub2JvZHksXG4gIHJlYWRPbmx5LFxuICBnZXRBdXRoRm9yU2Vzc2lvblRva2VuLFxuICBnZXRBdXRoRm9yTGVnYWN5U2Vzc2lvblRva2VuLFxuICBjcmVhdGVTZXNzaW9uLFxufTtcbiJdfQ==