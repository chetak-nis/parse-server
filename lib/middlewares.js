"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleParseHeaders = handleParseHeaders;
exports.allowCrossDomain = allowCrossDomain;
exports.allowMethodOverride = allowMethodOverride;
exports.handleParseErrors = handleParseErrors;
exports.enforceMasterKeyAccess = enforceMasterKeyAccess;
exports.promiseEnforceMasterKeyAccess = promiseEnforceMasterKeyAccess;

var _cache = _interopRequireDefault(require("./cache"));

var _node = _interopRequireDefault(require("parse/node"));

var _Auth = _interopRequireDefault(require("./Auth"));

var _AdminAuth = require("./AdminAuth");

var _Config = _interopRequireDefault(require("./Config"));

var _ClientSDK = _interopRequireDefault(require("./ClientSDK"));

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!process.env.USER_SERVICE) {
  _Auth["default"] = _AdminAuth;
} // Checks that the request is authorized for this app and checks user
// auth too.
// The bodyparser should run before this middleware.
// Adds info to the request:
// req.config - the Config for this app
// req.auth - the Auth for this request


function handleParseHeaders(req, res, next) {
  var mountPathLength = req.originalUrl.length - req.url.length;
  var mountPath = req.originalUrl.slice(0, mountPathLength);
  var mount = req.protocol + '://' + req.get('host') + mountPath;
  var info = {
    appId: req.get('X-Parse-Application-Id'),
    sessionToken: req.get('X-Parse-Session-Token'),
    masterKey: req.get('X-Parse-Master-Key'),
    installationId: req.get('X-Parse-Installation-Id'),
    clientKey: req.get('X-Parse-Client-Key'),
    javascriptKey: req.get('X-Parse-Javascript-Key'),
    dotNetKey: req.get('X-Parse-Windows-Key'),
    restAPIKey: req.get('X-Parse-REST-API-Key'),
    clientVersion: req.get('X-Parse-Client-Version')
  };
  var basicAuth = httpAuth(req);

  if (basicAuth) {
    var basicAuthAppId = basicAuth.appId;

    if (_cache.default.get(basicAuthAppId)) {
      info.appId = basicAuthAppId;
      info.masterKey = basicAuth.masterKey || info.masterKey;
      info.javascriptKey = basicAuth.javascriptKey || info.javascriptKey;
    }
  }

  if (req.body) {
    // Unity SDK sends a _noBody key which needs to be removed.
    // Unclear at this point if action needs to be taken.
    delete req.body._noBody;
  }

  var fileViaJSON = false;

  if (!info.appId || !_cache.default.get(info.appId)) {
    // See if we can find the app id on the body.
    if (req.body instanceof Buffer) {
      // The only chance to find the app id is if this is a file
      // upload that actually is a JSON body. So try to parse it.
      req.body = JSON.parse(req.body);
      fileViaJSON = true;
    }

    if (req.body) {
      delete req.body._RevocableSession;
    }

    if (req.body && req.body._ApplicationId && _cache.default.get(req.body._ApplicationId) && (!info.masterKey || _cache.default.get(req.body._ApplicationId).masterKey === info.masterKey)) {
      info.appId = req.body._ApplicationId;
      info.javascriptKey = req.body._JavaScriptKey || '';
      delete req.body._ApplicationId;
      delete req.body._JavaScriptKey; // TODO: test that the REST API formats generated by the other
      // SDKs are handled ok

      if (req.body._ClientVersion) {
        info.clientVersion = req.body._ClientVersion;
        delete req.body._ClientVersion;
      }

      if (req.body._InstallationId) {
        info.installationId = req.body._InstallationId;
        delete req.body._InstallationId;
      }

      if (req.body._SessionToken) {
        info.sessionToken = req.body._SessionToken;
        delete req.body._SessionToken;
      }

      if (req.body._MasterKey) {
        info.masterKey = req.body._MasterKey;
        delete req.body._MasterKey;
      }

      if (req.body._ContentType) {
        req.headers['content-type'] = req.body._ContentType;
        delete req.body._ContentType;
      }
    } else {
      return invalidRequest(req, res);
    }
  }

  if (info.clientVersion) {
    info.clientSDK = _ClientSDK.default.fromString(info.clientVersion);
  }

  if (fileViaJSON) {
    // We need to repopulate req.body with a buffer
    var base64 = req.body.base64;
    req.body = new Buffer(base64, 'base64');
  }

  const clientIp = getClientIp(req);
  info.app = _cache.default.get(info.appId);
  req.config = _Config.default.get(info.appId, mount);
  req.config.headers = req.headers || {};
  req.config.ip = clientIp;
  req.info = info;

  if (info.masterKey && req.config.masterKeyIps && req.config.masterKeyIps.length !== 0 && req.config.masterKeyIps.indexOf(clientIp) === -1) {
    return invalidRequest(req, res);
  }

  var isMaster = info.masterKey === req.config.masterKey;

  if (isMaster) {
    req.auth = new _Auth.default.Auth({
      config: req.config,
      installationId: info.installationId,
      isMaster: true
    });
    next();
    return;
  }

  var isReadOnlyMaster = info.masterKey === req.config.readOnlyMasterKey;

  if (typeof req.config.readOnlyMasterKey != 'undefined' && req.config.readOnlyMasterKey && isReadOnlyMaster) {
    req.auth = new _Auth.default.Auth({
      config: req.config,
      installationId: info.installationId,
      isMaster: true,
      isReadOnly: true
    });
    next();
    return;
  } // Client keys are not required in parse-server, but if any have been configured in the server, validate them
  //  to preserve original behavior.


  const keys = ['clientKey', 'javascriptKey', 'dotNetKey', 'restAPIKey'];
  const oneKeyConfigured = keys.some(function (key) {
    return req.config[key] !== undefined;
  });
  const oneKeyMatches = keys.some(function (key) {
    return req.config[key] !== undefined && info[key] === req.config[key];
  });

  if (oneKeyConfigured && !oneKeyMatches) {
    return invalidRequest(req, res);
  }

  if (req.url == '/login') {
    delete info.sessionToken;
  }

  if (!info.sessionToken) {
    req.auth = new _Auth.default.Auth({
      config: req.config,
      installationId: info.installationId,
      isMaster: false
    });
    next();
    return;
  }

  return Promise.resolve().then(() => {
    // handle the upgradeToRevocableSession path on it's own
    if (info.sessionToken && req.url === '/upgradeToRevocableSession' && info.sessionToken.indexOf('r:') != 0) {
      return _Auth.default.getAuthForLegacySessionToken({
        config: req.config,
        installationId: info.installationId,
        sessionToken: info.sessionToken
      });
    } else {
      return _Auth.default.getAuthForSessionToken({
        config: req.config,
        installationId: info.installationId,
        sessionToken: info.sessionToken
      });
    }
  }).then(auth => {
    if (auth) {
      req.auth = auth;
      next();
    }
  }).catch(error => {
    if (error instanceof _node.default.Error) {
      next(error);
      return;
    } else {
      // TODO: Determine the correct error scenario.
      req.config.loggerController.error('error getting auth for sessionToken', error);
      throw new _node.default.Error(_node.default.Error.UNKNOWN_ERROR, error);
    }
  });
}

function getClientIp(req) {
  if (req.headers['x-forwarded-for']) {
    // try to get from x-forwared-for if it set (behind reverse proxy)
    return req.headers['x-forwarded-for'].split(',')[0];
  } else if (req.connection && req.connection.remoteAddress) {
    // no proxy, try getting from connection.remoteAddress
    return req.connection.remoteAddress;
  } else if (req.socket) {
    // try to get it from req.socket
    return req.socket.remoteAddress;
  } else if (req.connection && req.connection.socket) {
    // try to get it form the connection.socket
    return req.connection.socket.remoteAddress;
  } else {
    // if non above, fallback.
    return req.ip;
  }
}

function httpAuth(req) {
  if (!(req.req || req).headers.authorization) return;
  var header = (req.req || req).headers.authorization;
  var appId, masterKey, javascriptKey; // parse header

  var authPrefix = 'basic ';
  var match = header.toLowerCase().indexOf(authPrefix);

  if (match == 0) {
    var encodedAuth = header.substring(authPrefix.length, header.length);
    var credentials = decodeBase64(encodedAuth).split(':');

    if (credentials.length == 2) {
      appId = credentials[0];
      var key = credentials[1];
      var jsKeyPrefix = 'javascript-key=';
      var matchKey = key.indexOf(jsKeyPrefix);

      if (matchKey == 0) {
        javascriptKey = key.substring(jsKeyPrefix.length, key.length);
      } else {
        masterKey = key;
      }
    }
  }

  return {
    appId: appId,
    masterKey: masterKey,
    javascriptKey: javascriptKey
  };
}

function decodeBase64(str) {
  return new Buffer(str, 'base64').toString();
}

function allowCrossDomain(req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'X-Parse-Master-Key, X-Parse-REST-API-Key, X-Parse-Javascript-Key, X-Parse-Application-Id, X-Parse-Client-Version, X-Parse-Session-Token, X-Requested-With, X-Parse-Revocable-Session, Content-Type, Pragma, Cache-Control');
  res.header('Access-Control-Expose-Headers', 'X-Parse-Job-Status-Id, X-Parse-Push-Status-Id'); // intercept OPTIONS method

  if ('OPTIONS' == req.method) {
    res.sendStatus(200);
  } else {
    next();
  }
}

function allowMethodOverride(req, res, next) {
  if (req.method === 'POST' && req.body._method) {
    req.originalMethod = req.method;
    req.method = req.body._method;
    delete req.body._method;
  }

  next();
}

function handleParseErrors(err, req, res, next) {
  const log = req.config && req.config.loggerController || _logger.default;

  if (err instanceof _node.default.Error) {
    let httpStatus; // TODO: fill out this mapping

    switch (err.code) {
      case _node.default.Error.INTERNAL_SERVER_ERROR:
        httpStatus = 500;
        break;

      case _node.default.Error.OBJECT_NOT_FOUND:
        httpStatus = 404;
        break;

      default:
        httpStatus = 400;
    }

    res.status(httpStatus);
    res.json({
      code: err.code,
      error: err.message
    });
    log.error('Parse error: ', err);

    if (req.config && req.config.enableExpressErrorHandler) {
      next(err);
    }
  } else if (err.status && err.message) {
    res.status(err.status);
    res.json({
      error: err.message
    });
    next(err);
  } else {
    log.error('Uncaught internal server error.', err, err.stack);
    res.status(500);
    res.json({
      code: _node.default.Error.INTERNAL_SERVER_ERROR,
      message: 'Internal server error.'
    });
    next(err);
  }
}

function enforceMasterKeyAccess(req, res, next) {
  if (!req.auth.isMaster) {
    res.status(403);
    res.end('{"error":"unauthorized: master key is required"}');
    return;
  }

  next();
}

function promiseEnforceMasterKeyAccess(request) {
  if (!request.auth.isMaster) {
    const error = new Error();
    error.status = 403;
    error.message = 'unauthorized: master key is required';
    throw error;
  }

  return Promise.resolve();
}

function invalidRequest(req, res) {
  res.status(403);
  res.end('{"error":"unauthorized"}');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9taWRkbGV3YXJlcy5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiVVNFUl9TRVJWSUNFIiwiYWRtaW5hdXRoIiwiaGFuZGxlUGFyc2VIZWFkZXJzIiwicmVxIiwicmVzIiwibmV4dCIsIm1vdW50UGF0aExlbmd0aCIsIm9yaWdpbmFsVXJsIiwibGVuZ3RoIiwidXJsIiwibW91bnRQYXRoIiwic2xpY2UiLCJtb3VudCIsInByb3RvY29sIiwiZ2V0IiwiaW5mbyIsImFwcElkIiwic2Vzc2lvblRva2VuIiwibWFzdGVyS2V5IiwiaW5zdGFsbGF0aW9uSWQiLCJjbGllbnRLZXkiLCJqYXZhc2NyaXB0S2V5IiwiZG90TmV0S2V5IiwicmVzdEFQSUtleSIsImNsaWVudFZlcnNpb24iLCJiYXNpY0F1dGgiLCJodHRwQXV0aCIsImJhc2ljQXV0aEFwcElkIiwiQXBwQ2FjaGUiLCJib2R5IiwiX25vQm9keSIsImZpbGVWaWFKU09OIiwiQnVmZmVyIiwiSlNPTiIsInBhcnNlIiwiX1Jldm9jYWJsZVNlc3Npb24iLCJfQXBwbGljYXRpb25JZCIsIl9KYXZhU2NyaXB0S2V5IiwiX0NsaWVudFZlcnNpb24iLCJfSW5zdGFsbGF0aW9uSWQiLCJfU2Vzc2lvblRva2VuIiwiX01hc3RlcktleSIsIl9Db250ZW50VHlwZSIsImhlYWRlcnMiLCJpbnZhbGlkUmVxdWVzdCIsImNsaWVudFNESyIsIkNsaWVudFNESyIsImZyb21TdHJpbmciLCJiYXNlNjQiLCJjbGllbnRJcCIsImdldENsaWVudElwIiwiYXBwIiwiY29uZmlnIiwiQ29uZmlnIiwiaXAiLCJtYXN0ZXJLZXlJcHMiLCJpbmRleE9mIiwiaXNNYXN0ZXIiLCJhdXRoIiwiQXV0aCIsImlzUmVhZE9ubHlNYXN0ZXIiLCJyZWFkT25seU1hc3RlcktleSIsImlzUmVhZE9ubHkiLCJrZXlzIiwib25lS2V5Q29uZmlndXJlZCIsInNvbWUiLCJrZXkiLCJ1bmRlZmluZWQiLCJvbmVLZXlNYXRjaGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZ2V0QXV0aEZvckxlZ2FjeVNlc3Npb25Ub2tlbiIsImdldEF1dGhGb3JTZXNzaW9uVG9rZW4iLCJjYXRjaCIsImVycm9yIiwiUGFyc2UiLCJFcnJvciIsImxvZ2dlckNvbnRyb2xsZXIiLCJVTktOT1dOX0VSUk9SIiwic3BsaXQiLCJjb25uZWN0aW9uIiwicmVtb3RlQWRkcmVzcyIsInNvY2tldCIsImF1dGhvcml6YXRpb24iLCJoZWFkZXIiLCJhdXRoUHJlZml4IiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsImVuY29kZWRBdXRoIiwic3Vic3RyaW5nIiwiY3JlZGVudGlhbHMiLCJkZWNvZGVCYXNlNjQiLCJqc0tleVByZWZpeCIsIm1hdGNoS2V5Iiwic3RyIiwidG9TdHJpbmciLCJhbGxvd0Nyb3NzRG9tYWluIiwibWV0aG9kIiwic2VuZFN0YXR1cyIsImFsbG93TWV0aG9kT3ZlcnJpZGUiLCJfbWV0aG9kIiwib3JpZ2luYWxNZXRob2QiLCJoYW5kbGVQYXJzZUVycm9ycyIsImVyciIsImxvZyIsImRlZmF1bHRMb2dnZXIiLCJodHRwU3RhdHVzIiwiY29kZSIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIk9CSkVDVF9OT1RfRk9VTkQiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVuYWJsZUV4cHJlc3NFcnJvckhhbmRsZXIiLCJzdGFjayIsImVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MiLCJlbmQiLCJwcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcyIsInJlcXVlc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0EsSUFBSSxDQUFDQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsWUFBakIsRUFBK0I7QUFDN0IsbUJBQU9DLGVBQVA7QUFBQTtBQUFBO0FBQ0QsQyxDQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0Msa0JBQVQsQ0FBNEJDLEdBQTVC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LFVBQU10QyxLQUFOO0FBQ0Q7O0FBQ0QsU0FBT04sT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDRDs7QUFFRCxTQUFTMUIsY0FBVCxDQUF3QnpDLEdBQXhCLEVBQTZCQyxHQUE3QixFQUFrQztBQUNoQ0EsRUFBQUEsR0FBRyxDQUFDMkcsTUFBSixDQUFXLEdBQVg7QUFDQTNHLEVBQUFBLEdBQUcsQ0FBQ2lILEdBQUosQ0FBUSwwQkFBUjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFwcENhY2hlIGZyb20gJy4vY2FjaGUnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IGF1dGggZnJvbSAnLi9BdXRoJztcbmltcG9ydCB7IGF1dGggYXMgYWRtaW5hdXRoIH0gZnJvbSAnLi9BZG1pbkF1dGgnO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuL0NvbmZpZyc7XG5pbXBvcnQgQ2xpZW50U0RLIGZyb20gJy4vQ2xpZW50U0RLJztcbmltcG9ydCBkZWZhdWx0TG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmlmICghcHJvY2Vzcy5lbnYuVVNFUl9TRVJWSUNFKSB7XG4gIGF1dGggPSBhZG1pbmF1dGg7XG59XG4vLyBDaGVja3MgdGhhdCB0aGUgcmVxdWVzdCBpcyBhdXRob3JpemVkIGZvciB0aGlzIGFwcCBhbmQgY2hlY2tzIHVzZXJcbi8vIGF1dGggdG9vLlxuLy8gVGhlIGJvZHlwYXJzZXIgc2hvdWxkIHJ1biBiZWZvcmUgdGhpcyBtaWRkbGV3YXJlLlxuLy8gQWRkcyBpbmZvIHRvIHRoZSByZXF1ZXN0OlxuLy8gcmVxLmNvbmZpZyAtIHRoZSBDb25maWcgZm9yIHRoaXMgYXBwXG4vLyByZXEuYXV0aCAtIHRoZSBBdXRoIGZvciB0aGlzIHJlcXVlc3RcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQYXJzZUhlYWRlcnMocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIG1vdW50UGF0aExlbmd0aCA9IHJlcS5vcmlnaW5hbFVybC5sZW5ndGggLSByZXEudXJsLmxlbmd0aDtcbiAgdmFyIG1vdW50UGF0aCA9IHJlcS5vcmlnaW5hbFVybC5zbGljZSgwLCBtb3VudFBhdGhMZW5ndGgpO1xuICB2YXIgbW91bnQgPSByZXEucHJvdG9jb2wgKyAnOi8vJyArIHJlcS5nZXQoJ2hvc3QnKSArIG1vdW50UGF0aDtcblxuICB2YXIgaW5mbyA9IHtcbiAgICBhcHBJZDogcmVxLmdldCgnWC1QYXJzZS1BcHBsaWNhdGlvbi1JZCcpLFxuICAgIHNlc3Npb25Ub2tlbjogcmVxLmdldCgnWC1QYXJzZS1TZXNzaW9uLVRva2VuJyksXG4gICAgbWFzdGVyS2V5OiByZXEuZ2V0KCdYLVBhcnNlLU1hc3Rlci1LZXknKSxcbiAgICBpbnN0YWxsYXRpb25JZDogcmVxLmdldCgnWC1QYXJzZS1JbnN0YWxsYXRpb24tSWQnKSxcbiAgICBjbGllbnRLZXk6IHJlcS5nZXQoJ1gtUGFyc2UtQ2xpZW50LUtleScpLFxuICAgIGphdmFzY3JpcHRLZXk6IHJlcS5nZXQoJ1gtUGFyc2UtSmF2YXNjcmlwdC1LZXknKSxcbiAgICBkb3ROZXRLZXk6IHJlcS5nZXQoJ1gtUGFyc2UtV2luZG93cy1LZXknKSxcbiAgICByZXN0QVBJS2V5OiByZXEuZ2V0KCdYLVBhcnNlLVJFU1QtQVBJLUtleScpLFxuICAgIGNsaWVudFZlcnNpb246IHJlcS5nZXQoJ1gtUGFyc2UtQ2xpZW50LVZlcnNpb24nKSxcbiAgfTtcblxuICB2YXIgYmFzaWNBdXRoID0gaHR0cEF1dGgocmVxKTtcblxuICBpZiAoYmFzaWNBdXRoKSB7XG4gICAgdmFyIGJhc2ljQXV0aEFwcElkID0gYmFzaWNBdXRoLmFwcElkO1xuICAgIGlmIChBcHBDYWNoZS5nZXQoYmFzaWNBdXRoQXBwSWQpKSB7XG4gICAgICBpbmZvLmFwcElkID0gYmFzaWNBdXRoQXBwSWQ7XG4gICAgICBpbmZvLm1hc3RlcktleSA9IGJhc2ljQXV0aC5tYXN0ZXJLZXkgfHwgaW5mby5tYXN0ZXJLZXk7XG4gICAgICBpbmZvLmphdmFzY3JpcHRLZXkgPSBiYXNpY0F1dGguamF2YXNjcmlwdEtleSB8fCBpbmZvLmphdmFzY3JpcHRLZXk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlcS5ib2R5KSB7XG4gICAgLy8gVW5pdHkgU0RLIHNlbmRzIGEgX25vQm9keSBrZXkgd2hpY2ggbmVlZHMgdG8gYmUgcmVtb3ZlZC5cbiAgICAvLyBVbmNsZWFyIGF0IHRoaXMgcG9pbnQgaWYgYWN0aW9uIG5lZWRzIHRvIGJlIHRha2VuLlxuICAgIGRlbGV0ZSByZXEuYm9keS5fbm9Cb2R5O1xuICB9XG5cbiAgdmFyIGZpbGVWaWFKU09OID0gZmFsc2U7XG5cbiAgaWYgKCFpbmZvLmFwcElkIHx8ICFBcHBDYWNoZS5nZXQoaW5mby5hcHBJZCkpIHtcbiAgICAvLyBTZWUgaWYgd2UgY2FuIGZpbmQgdGhlIGFwcCBpZCBvbiB0aGUgYm9keS5cbiAgICBpZiAocmVxLmJvZHkgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIC8vIFRoZSBvbmx5IGNoYW5jZSB0byBmaW5kIHRoZSBhcHAgaWQgaXMgaWYgdGhpcyBpcyBhIGZpbGVcbiAgICAgIC8vIHVwbG9hZCB0aGF0IGFjdHVhbGx5IGlzIGEgSlNPTiBib2R5LiBTbyB0cnkgdG8gcGFyc2UgaXQuXG4gICAgICByZXEuYm9keSA9IEpTT04ucGFyc2UocmVxLmJvZHkpO1xuICAgICAgZmlsZVZpYUpTT04gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChyZXEuYm9keSkge1xuICAgICAgZGVsZXRlIHJlcS5ib2R5Ll9SZXZvY2FibGVTZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHJlcS5ib2R5ICYmXG4gICAgICByZXEuYm9keS5fQXBwbGljYXRpb25JZCAmJlxuICAgICAgQXBwQ2FjaGUuZ2V0KHJlcS5ib2R5Ll9BcHBsaWNhdGlvbklkKSAmJlxuICAgICAgKCFpbmZvLm1hc3RlcktleSB8fFxuICAgICAgICBBcHBDYWNoZS5nZXQocmVxLmJvZHkuX0FwcGxpY2F0aW9uSWQpLm1hc3RlcktleSA9PT0gaW5mby5tYXN0ZXJLZXkpXG4gICAgKSB7XG4gICAgICBpbmZvLmFwcElkID0gcmVxLmJvZHkuX0FwcGxpY2F0aW9uSWQ7XG4gICAgICBpbmZvLmphdmFzY3JpcHRLZXkgPSByZXEuYm9keS5fSmF2YVNjcmlwdEtleSB8fCAnJztcbiAgICAgIGRlbGV0ZSByZXEuYm9keS5fQXBwbGljYXRpb25JZDtcbiAgICAgIGRlbGV0ZSByZXEuYm9keS5fSmF2YVNjcmlwdEtleTtcbiAgICAgIC8vIFRPRE86IHRlc3QgdGhhdCB0aGUgUkVTVCBBUEkgZm9ybWF0cyBnZW5lcmF0ZWQgYnkgdGhlIG90aGVyXG4gICAgICAvLyBTREtzIGFyZSBoYW5kbGVkIG9rXG4gICAgICBpZiAocmVxLmJvZHkuX0NsaWVudFZlcnNpb24pIHtcbiAgICAgICAgaW5mby5jbGllbnRWZXJzaW9uID0gcmVxLmJvZHkuX0NsaWVudFZlcnNpb247XG4gICAgICAgIGRlbGV0ZSByZXEuYm9keS5fQ2xpZW50VmVyc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChyZXEuYm9keS5fSW5zdGFsbGF0aW9uSWQpIHtcbiAgICAgICAgaW5mby5pbnN0YWxsYXRpb25JZCA9IHJlcS5ib2R5Ll9JbnN0YWxsYXRpb25JZDtcbiAgICAgICAgZGVsZXRlIHJlcS5ib2R5Ll9JbnN0YWxsYXRpb25JZDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXEuYm9keS5fU2Vzc2lvblRva2VuKSB7XG4gICAgICAgIGluZm8uc2Vzc2lvblRva2VuID0gcmVxLmJvZHkuX1Nlc3Npb25Ub2tlbjtcbiAgICAgICAgZGVsZXRlIHJlcS5ib2R5Ll9TZXNzaW9uVG9rZW47XG4gICAgICB9XG4gICAgICBpZiAocmVxLmJvZHkuX01hc3RlcktleSkge1xuICAgICAgICBpbmZvLm1hc3RlcktleSA9IHJlcS5ib2R5Ll9NYXN0ZXJLZXk7XG4gICAgICAgIGRlbGV0ZSByZXEuYm9keS5fTWFzdGVyS2V5O1xuICAgICAgfVxuICAgICAgaWYgKHJlcS5ib2R5Ll9Db250ZW50VHlwZSkge1xuICAgICAgICByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSByZXEuYm9keS5fQ29udGVudFR5cGU7XG4gICAgICAgIGRlbGV0ZSByZXEuYm9keS5fQ29udGVudFR5cGU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpbnZhbGlkUmVxdWVzdChyZXEsIHJlcyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluZm8uY2xpZW50VmVyc2lvbikge1xuICAgIGluZm8uY2xpZW50U0RLID0gQ2xpZW50U0RLLmZyb21TdHJpbmcoaW5mby5jbGllbnRWZXJzaW9uKTtcbiAgfVxuXG4gIGlmIChmaWxlVmlhSlNPTikge1xuICAgIC8vIFdlIG5lZWQgdG8gcmVwb3B1bGF0ZSByZXEuYm9keSB3aXRoIGEgYnVmZmVyXG4gICAgdmFyIGJhc2U2NCA9IHJlcS5ib2R5LmJhc2U2NDtcbiAgICByZXEuYm9keSA9IG5ldyBCdWZmZXIoYmFzZTY0LCAnYmFzZTY0Jyk7XG4gIH1cblxuICBjb25zdCBjbGllbnRJcCA9IGdldENsaWVudElwKHJlcSk7XG5cbiAgaW5mby5hcHAgPSBBcHBDYWNoZS5nZXQoaW5mby5hcHBJZCk7XG4gIHJlcS5jb25maWcgPSBDb25maWcuZ2V0KGluZm8uYXBwSWQsIG1vdW50KTtcbiAgcmVxLmNvbmZpZy5oZWFkZXJzID0gcmVxLmhlYWRlcnMgfHwge307XG4gIHJlcS5jb25maWcuaXAgPSBjbGllbnRJcDtcbiAgcmVxLmluZm8gPSBpbmZvO1xuXG4gIGlmIChcbiAgICBpbmZvLm1hc3RlcktleSAmJlxuICAgIHJlcS5jb25maWcubWFzdGVyS2V5SXBzICYmXG4gICAgcmVxLmNvbmZpZy5tYXN0ZXJLZXlJcHMubGVuZ3RoICE9PSAwICYmXG4gICAgcmVxLmNvbmZpZy5tYXN0ZXJLZXlJcHMuaW5kZXhPZihjbGllbnRJcCkgPT09IC0xXG4gICkge1xuICAgIHJldHVybiBpbnZhbGlkUmVxdWVzdChyZXEsIHJlcyk7XG4gIH1cblxuICB2YXIgaXNNYXN0ZXIgPSBpbmZvLm1hc3RlcktleSA9PT0gcmVxLmNvbmZpZy5tYXN0ZXJLZXk7XG5cbiAgaWYgKGlzTWFzdGVyKSB7XG4gICAgcmVxLmF1dGggPSBuZXcgYXV0aC5BdXRoKHtcbiAgICAgIGNvbmZpZzogcmVxLmNvbmZpZyxcbiAgICAgIGluc3RhbGxhdGlvbklkOiBpbmZvLmluc3RhbGxhdGlvbklkLFxuICAgICAgaXNNYXN0ZXI6IHRydWUsXG4gICAgfSk7XG4gICAgbmV4dCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpc1JlYWRPbmx5TWFzdGVyID0gaW5mby5tYXN0ZXJLZXkgPT09IHJlcS5jb25maWcucmVhZE9ubHlNYXN0ZXJLZXk7XG4gIGlmIChcbiAgICB0eXBlb2YgcmVxLmNvbmZpZy5yZWFkT25seU1hc3RlcktleSAhPSAndW5kZWZpbmVkJyAmJlxuICAgIHJlcS5jb25maWcucmVhZE9ubHlNYXN0ZXJLZXkgJiZcbiAgICBpc1JlYWRPbmx5TWFzdGVyXG4gICkge1xuICAgIHJlcS5hdXRoID0gbmV3IGF1dGguQXV0aCh7XG4gICAgICBjb25maWc6IHJlcS5jb25maWcsXG4gICAgICBpbnN0YWxsYXRpb25JZDogaW5mby5pbnN0YWxsYXRpb25JZCxcbiAgICAgIGlzTWFzdGVyOiB0cnVlLFxuICAgICAgaXNSZWFkT25seTogdHJ1ZSxcbiAgICB9KTtcbiAgICBuZXh0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ2xpZW50IGtleXMgYXJlIG5vdCByZXF1aXJlZCBpbiBwYXJzZS1zZXJ2ZXIsIGJ1dCBpZiBhbnkgaGF2ZSBiZWVuIGNvbmZpZ3VyZWQgaW4gdGhlIHNlcnZlciwgdmFsaWRhdGUgdGhlbVxuICAvLyAgdG8gcHJlc2VydmUgb3JpZ2luYWwgYmVoYXZpb3IuXG4gIGNvbnN0IGtleXMgPSBbJ2NsaWVudEtleScsICdqYXZhc2NyaXB0S2V5JywgJ2RvdE5ldEtleScsICdyZXN0QVBJS2V5J107XG4gIGNvbnN0IG9uZUtleUNvbmZpZ3VyZWQgPSBrZXlzLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHJlcS5jb25maWdba2V5XSAhPT0gdW5kZWZpbmVkO1xuICB9KTtcbiAgY29uc3Qgb25lS2V5TWF0Y2hlcyA9IGtleXMuc29tZShmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gcmVxLmNvbmZpZ1trZXldICE9PSB1bmRlZmluZWQgJiYgaW5mb1trZXldID09PSByZXEuY29uZmlnW2tleV07XG4gIH0pO1xuXG4gIGlmIChvbmVLZXlDb25maWd1cmVkICYmICFvbmVLZXlNYXRjaGVzKSB7XG4gICAgcmV0dXJuIGludmFsaWRSZXF1ZXN0KHJlcSwgcmVzKTtcbiAgfVxuXG4gIGlmIChyZXEudXJsID09ICcvbG9naW4nKSB7XG4gICAgZGVsZXRlIGluZm8uc2Vzc2lvblRva2VuO1xuICB9XG5cbiAgaWYgKCFpbmZvLnNlc3Npb25Ub2tlbikge1xuICAgIHJlcS5hdXRoID0gbmV3IGF1dGguQXV0aCh7XG4gICAgICBjb25maWc6IHJlcS5jb25maWcsXG4gICAgICBpbnN0YWxsYXRpb25JZDogaW5mby5pbnN0YWxsYXRpb25JZCxcbiAgICAgIGlzTWFzdGVyOiBmYWxzZSxcbiAgICB9KTtcbiAgICBuZXh0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgLy8gaGFuZGxlIHRoZSB1cGdyYWRlVG9SZXZvY2FibGVTZXNzaW9uIHBhdGggb24gaXQncyBvd25cbiAgICAgIGlmIChcbiAgICAgICAgaW5mby5zZXNzaW9uVG9rZW4gJiZcbiAgICAgICAgcmVxLnVybCA9PT0gJy91cGdyYWRlVG9SZXZvY2FibGVTZXNzaW9uJyAmJlxuICAgICAgICBpbmZvLnNlc3Npb25Ub2tlbi5pbmRleE9mKCdyOicpICE9IDBcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gYXV0aC5nZXRBdXRoRm9yTGVnYWN5U2Vzc2lvblRva2VuKHtcbiAgICAgICAgICBjb25maWc6IHJlcS5jb25maWcsXG4gICAgICAgICAgaW5zdGFsbGF0aW9uSWQ6IGluZm8uaW5zdGFsbGF0aW9uSWQsXG4gICAgICAgICAgc2Vzc2lvblRva2VuOiBpbmZvLnNlc3Npb25Ub2tlbixcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYXV0aC5nZXRBdXRoRm9yU2Vzc2lvblRva2VuKHtcbiAgICAgICAgICBjb25maWc6IHJlcS5jb25maWcsXG4gICAgICAgICAgaW5zdGFsbGF0aW9uSWQ6IGluZm8uaW5zdGFsbGF0aW9uSWQsXG4gICAgICAgICAgc2Vzc2lvblRva2VuOiBpbmZvLnNlc3Npb25Ub2tlbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbihhdXRoID0+IHtcbiAgICAgIGlmIChhdXRoKSB7XG4gICAgICAgIHJlcS5hdXRoID0gYXV0aDtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFBhcnNlLkVycm9yKSB7XG4gICAgICAgIG5leHQoZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBEZXRlcm1pbmUgdGhlIGNvcnJlY3QgZXJyb3Igc2NlbmFyaW8uXG4gICAgICAgIHJlcS5jb25maWcubG9nZ2VyQ29udHJvbGxlci5lcnJvcihcbiAgICAgICAgICAnZXJyb3IgZ2V0dGluZyBhdXRoIGZvciBzZXNzaW9uVG9rZW4nLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5VTktOT1dOX0VSUk9SLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudElwKHJlcSkge1xuICBpZiAocmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddKSB7XG4gICAgLy8gdHJ5IHRvIGdldCBmcm9tIHgtZm9yd2FyZWQtZm9yIGlmIGl0IHNldCAoYmVoaW5kIHJldmVyc2UgcHJveHkpXG4gICAgcmV0dXJuIHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXS5zcGxpdCgnLCcpWzBdO1xuICB9IGVsc2UgaWYgKHJlcS5jb25uZWN0aW9uICYmIHJlcS5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3MpIHtcbiAgICAvLyBubyBwcm94eSwgdHJ5IGdldHRpbmcgZnJvbSBjb25uZWN0aW9uLnJlbW90ZUFkZHJlc3NcbiAgICByZXR1cm4gcmVxLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzcztcbiAgfSBlbHNlIGlmIChyZXEuc29ja2V0KSB7XG4gICAgLy8gdHJ5IHRvIGdldCBpdCBmcm9tIHJlcS5zb2NrZXRcbiAgICByZXR1cm4gcmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzO1xuICB9IGVsc2UgaWYgKHJlcS5jb25uZWN0aW9uICYmIHJlcS5jb25uZWN0aW9uLnNvY2tldCkge1xuICAgIC8vIHRyeSB0byBnZXQgaXQgZm9ybSB0aGUgY29ubmVjdGlvbi5zb2NrZXRcbiAgICByZXR1cm4gcmVxLmNvbm5lY3Rpb24uc29ja2V0LnJlbW90ZUFkZHJlc3M7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgbm9uIGFib3ZlLCBmYWxsYmFjay5cbiAgICByZXR1cm4gcmVxLmlwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGh0dHBBdXRoKHJlcSkge1xuICBpZiAoIShyZXEucmVxIHx8IHJlcSkuaGVhZGVycy5hdXRob3JpemF0aW9uKSByZXR1cm47XG5cbiAgdmFyIGhlYWRlciA9IChyZXEucmVxIHx8IHJlcSkuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICB2YXIgYXBwSWQsIG1hc3RlcktleSwgamF2YXNjcmlwdEtleTtcblxuICAvLyBwYXJzZSBoZWFkZXJcbiAgdmFyIGF1dGhQcmVmaXggPSAnYmFzaWMgJztcblxuICB2YXIgbWF0Y2ggPSBoZWFkZXIudG9Mb3dlckNhc2UoKS5pbmRleE9mKGF1dGhQcmVmaXgpO1xuXG4gIGlmIChtYXRjaCA9PSAwKSB7XG4gICAgdmFyIGVuY29kZWRBdXRoID0gaGVhZGVyLnN1YnN0cmluZyhhdXRoUHJlZml4Lmxlbmd0aCwgaGVhZGVyLmxlbmd0aCk7XG4gICAgdmFyIGNyZWRlbnRpYWxzID0gZGVjb2RlQmFzZTY0KGVuY29kZWRBdXRoKS5zcGxpdCgnOicpO1xuXG4gICAgaWYgKGNyZWRlbnRpYWxzLmxlbmd0aCA9PSAyKSB7XG4gICAgICBhcHBJZCA9IGNyZWRlbnRpYWxzWzBdO1xuICAgICAgdmFyIGtleSA9IGNyZWRlbnRpYWxzWzFdO1xuXG4gICAgICB2YXIganNLZXlQcmVmaXggPSAnamF2YXNjcmlwdC1rZXk9JztcblxuICAgICAgdmFyIG1hdGNoS2V5ID0ga2V5LmluZGV4T2YoanNLZXlQcmVmaXgpO1xuICAgICAgaWYgKG1hdGNoS2V5ID09IDApIHtcbiAgICAgICAgamF2YXNjcmlwdEtleSA9IGtleS5zdWJzdHJpbmcoanNLZXlQcmVmaXgubGVuZ3RoLCBrZXkubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hc3RlcktleSA9IGtleTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBhcHBJZDogYXBwSWQsIG1hc3RlcktleTogbWFzdGVyS2V5LCBqYXZhc2NyaXB0S2V5OiBqYXZhc2NyaXB0S2V5IH07XG59XG5cbmZ1bmN0aW9uIGRlY29kZUJhc2U2NChzdHIpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93Q3Jvc3NEb21haW4ocmVxLCByZXMsIG5leHQpIHtcbiAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdHRVQsUFVULFBPU1QsREVMRVRFLE9QVElPTlMnKTtcbiAgcmVzLmhlYWRlcihcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsXG4gICAgJ1gtUGFyc2UtTWFzdGVyLUtleSwgWC1QYXJzZS1SRVNULUFQSS1LZXksIFgtUGFyc2UtSmF2YXNjcmlwdC1LZXksIFgtUGFyc2UtQXBwbGljYXRpb24tSWQsIFgtUGFyc2UtQ2xpZW50LVZlcnNpb24sIFgtUGFyc2UtU2Vzc2lvbi1Ub2tlbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgWC1QYXJzZS1SZXZvY2FibGUtU2Vzc2lvbiwgQ29udGVudC1UeXBlLCBQcmFnbWEsIENhY2hlLUNvbnRyb2wnXG4gICk7XG4gIHJlcy5oZWFkZXIoXG4gICAgJ0FjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzJyxcbiAgICAnWC1QYXJzZS1Kb2ItU3RhdHVzLUlkLCBYLVBhcnNlLVB1c2gtU3RhdHVzLUlkJ1xuICApO1xuICAvLyBpbnRlcmNlcHQgT1BUSU9OUyBtZXRob2RcbiAgaWYgKCdPUFRJT05TJyA9PSByZXEubWV0aG9kKSB7XG4gICAgcmVzLnNlbmRTdGF0dXMoMjAwKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0KCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93TWV0aG9kT3ZlcnJpZGUocmVxLCByZXMsIG5leHQpIHtcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJyAmJiByZXEuYm9keS5fbWV0aG9kKSB7XG4gICAgcmVxLm9yaWdpbmFsTWV0aG9kID0gcmVxLm1ldGhvZDtcbiAgICByZXEubWV0aG9kID0gcmVxLmJvZHkuX21ldGhvZDtcbiAgICBkZWxldGUgcmVxLmJvZHkuX21ldGhvZDtcbiAgfVxuICBuZXh0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQYXJzZUVycm9ycyhlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGNvbnN0IGxvZyA9IChyZXEuY29uZmlnICYmIHJlcS5jb25maWcubG9nZ2VyQ29udHJvbGxlcikgfHwgZGVmYXVsdExvZ2dlcjtcbiAgaWYgKGVyciBpbnN0YW5jZW9mIFBhcnNlLkVycm9yKSB7XG4gICAgbGV0IGh0dHBTdGF0dXM7XG4gICAgLy8gVE9ETzogZmlsbCBvdXQgdGhpcyBtYXBwaW5nXG4gICAgc3dpdGNoIChlcnIuY29kZSkge1xuICAgICAgY2FzZSBQYXJzZS5FcnJvci5JTlRFUk5BTF9TRVJWRVJfRVJST1I6XG4gICAgICAgIGh0dHBTdGF0dXMgPSA1MDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5EOlxuICAgICAgICBodHRwU3RhdHVzID0gNDA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGh0dHBTdGF0dXMgPSA0MDA7XG4gICAgfVxuXG4gICAgcmVzLnN0YXR1cyhodHRwU3RhdHVzKTtcbiAgICByZXMuanNvbih7IGNvZGU6IGVyci5jb2RlLCBlcnJvcjogZXJyLm1lc3NhZ2UgfSk7XG4gICAgbG9nLmVycm9yKCdQYXJzZSBlcnJvcjogJywgZXJyKTtcbiAgICBpZiAocmVxLmNvbmZpZyAmJiByZXEuY29uZmlnLmVuYWJsZUV4cHJlc3NFcnJvckhhbmRsZXIpIHtcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXJyLnN0YXR1cyAmJiBlcnIubWVzc2FnZSkge1xuICAgIHJlcy5zdGF0dXMoZXJyLnN0YXR1cyk7XG4gICAgcmVzLmpzb24oeyBlcnJvcjogZXJyLm1lc3NhZ2UgfSk7XG4gICAgbmV4dChlcnIpO1xuICB9IGVsc2Uge1xuICAgIGxvZy5lcnJvcignVW5jYXVnaHQgaW50ZXJuYWwgc2VydmVyIGVycm9yLicsIGVyciwgZXJyLnN0YWNrKTtcbiAgICByZXMuc3RhdHVzKDUwMCk7XG4gICAgcmVzLmpzb24oe1xuICAgICAgY29kZTogUGFyc2UuRXJyb3IuSU5URVJOQUxfU0VSVkVSX0VSUk9SLFxuICAgICAgbWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvci4nLFxuICAgIH0pO1xuICAgIG5leHQoZXJyKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5mb3JjZU1hc3RlcktleUFjY2VzcyhyZXEsIHJlcywgbmV4dCkge1xuICBpZiAoIXJlcS5hdXRoLmlzTWFzdGVyKSB7XG4gICAgcmVzLnN0YXR1cyg0MDMpO1xuICAgIHJlcy5lbmQoJ3tcImVycm9yXCI6XCJ1bmF1dGhvcml6ZWQ6IG1hc3RlciBrZXkgaXMgcmVxdWlyZWRcIn0nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MocmVxdWVzdCkge1xuICBpZiAoIXJlcXVlc3QuYXV0aC5pc01hc3Rlcikge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCk7XG4gICAgZXJyb3Iuc3RhdHVzID0gNDAzO1xuICAgIGVycm9yLm1lc3NhZ2UgPSAndW5hdXRob3JpemVkOiBtYXN0ZXIga2V5IGlzIHJlcXVpcmVkJztcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbmZ1bmN0aW9uIGludmFsaWRSZXF1ZXN0KHJlcSwgcmVzKSB7XG4gIHJlcy5zdGF0dXMoNDAzKTtcbiAgcmVzLmVuZCgne1wiZXJyb3JcIjpcInVuYXV0aG9yaXplZFwifScpO1xufVxuIl19